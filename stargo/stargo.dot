digraph stargo {
    rankdir=BT

    graph [fontname = "Inconsolata"];
    node [fontname = "Inconsolata"];
    edge [fontname = "Inconsolata"];

    node [
        shape = "record"
        style = "filled"
        fillcolor = "lightpink"
    ]

    IQueue [
        label = "{\<\<interface\>\>\nIQueue||+Push(T)\l+Pop(): T\l+Empty(): bool\l+Size(): int\l}"
    ]

    ISet [
        label = "{\<\<interface\>\>\nISet||+Insert(T)\l+Remove(T)\l+Has(T): bool\l+Empty(): bool\l+Size(): int\l+All(): []T\l}"
    ]

    ITask [
        label = "{\<\<interface\>\>\nITask||+SetFunc(F)\l+SetArgs(T)\l+State(): T\l+AddParent(ITask)\l+ParentSize(): int\l+IsReady(): bool\l+Process(): (T, error)\l}"
    ]

    IDag [
        label = "{\<\<interface\>\>\nIDag||+AddTask(ITask): error\l+AddEdge(ITask, ITask): error\l+Lock(): error\l+GetReadyTask(): ITask\l+Update(chan ITask)\l+State(): T\l+Size(): int\l}"
    ]

    IPool [
        label = "{\<\<interface\>\>\nIPool||+Init(int)\l+Process(IDag)\l}"
    ]

    node [
        fillcolor = "skyblue"
    ]

    Queue [
        label = "{Queue|-items: []T\l-mutex: sync.Mutex\l|}"
    ]

    Set [
        label = "{Set|-mp: map[T]bool\l-mutex: sync.Mutex\l|}"
    ]

    Task [
        label = "{Task|+Func: F\l+Args: T\l-parents: ISet\l-state: TaskState\l|}"
    ]

    Dag [
        label = "{Dag|-notReadyTaskSet: ISet\l-readyTaskQue0ue: IQueue\l-state: DagState\l-stateMutex: sync.Mutex\l-nAll: int\l-nDone: int\l-locked: bool\l-lockedMutex: sync.Mutesx\l|}"
    ]

    node [
        fillcolor = "palegreen"
    ]

    TaskState [
        label = "{\<\<enum\>\>\nTaskState\n|TASK_NOTDONE\lTASK_DONE\lTASK_WRONG\l}"
    ]

    DagState [
        label = "{\<\<enum\>\>\nDagState\n|DAG_INIT\lDAG_UPDATING\lDAG_NOTDONE\lDAG_DONE\l}"
    ]

    Pool [
        label = "{Pool|-workers: int\l-taskChan: chan ITask\l|-createWorker(int, chan ITask, *sync.WaitGroup)}"
    ]
    node [
        shape = "note"
        fillcolor = "lightgray"
    ]

    note01 [
        label = "language: Golang\l\lSymbols:\l+: public\l-: package\lT: interface{}\lF: func(T) T\l"
    ]


    edge [
        style=dashed 
        arrowhead=empty
    ]

    Queue -> IQueue
    Set -> ISet
    Task -> ITask 
    Dag -> IDag 
    Pool -> IPool

    edge [
        style=solid
        arrowhead=vee
    ]

    Task -> ISet
    Task -> TaskState
    Dag -> IQueue
    Dag -> DagState
    IPool -> IDag 

    edge [
        style=solid
        arrowhead=odiamond
    ]

    ITask -> IDag


}